" manage plugins by vundle
source ~/.vundleplugins.vim
filetype plugin indent on    " required


syntax on "for syntax

set title "show title in statusbar
set nocompatible "be iMproved, required
set noswapfile "disable creating swp file
set nowrap "dont wrap large lines
set ttyfast " faster redrawing

set noerrorbells "off audio error bells
set visualbell "off visual error bells
set t_vb= "off visual error bell"

set number "to show numbers
set shell=zsh "on shell, which shell to use
set showcmd "Show partial commands in the last line of the screen
set mouse=a "enable mouse support for vim
set laststatus=2 "Always display the status line, even if only one window is displayed
set scrolloff=3 "lines of text around cursor
set cmdheight=1 "command bar height
set hidden "current buffer can be put into background without closing
set nolazyredraw "don't redraw while executing macros
set showmatch "show matching braces
set noshowmode "don't show which mode disabled for PowerLine
set autoread "detect when a file is changed
set tm=500 "timeout length of key combination presses
set mat=2 " how many tenths of a second to blink

set autoindent "enable auto indent
set smartindent "enable smart indent

set incsearch "enable increment search
set ignorecase "enable ignore case
set smartcase "when using caps, ignore ic
set hlsearch "highlight search

" Tab control
set expandtab " tabs ftw
set smarttab " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4 " the visible width of tabs
set softtabstop=4 " edit as if the tabs are 4 characters wide
set shiftwidth=4 " number of spaces to use for indent and unindent
set shiftround " round indent to a multiple of 'shiftwidth'

" Better command-line completion
set wildmode=longest,list
set wildmenu

" yanking will paste directly to clipboard
set clipboard^=unnamed,unnamedplus
" Set the command window height to 2 lines, to avoid many cases of having to
" press <Enter> to continue"
set cmdheight=2
" set paste toggle
set pastetoggle=<leader>v
set term=screen-256color " required for tmux

" Folding
set foldmethod=syntax
set foldcolumn=1
set foldlevelstart=20
let g:vim_markdown_folding_disabled=1 " Markdown
let javaScript_fold=1                 " JavaScript
let perl_fold=1                       " Perl
let php_folding=1                     " PHP
let r_syntax_folding=1                " R
let ruby_fold=1                       " Ruby
let sh_fold_enabled=1                 " sh
let vimsyn_folding='af'               " Vim script
let xml_syntax_folding=1              " XML
autocmd BufRead,BufNewFile *.cql set filetype=cql
" Except Markdown
autocmd FileType mkd set sw=4
autocmd FileType mkd set sts=4

" To list special characters
set listchars=tab:▸\ ,eol:↲,extends:❯,precedes:❮,nbsp:+
set listchars+=trail:-
set showbreak=↪

set cursorline "show cursor line"

set encoding=utf8

" gui settings
if has("gui_running")
  "set guifont=Meslo\ LG\ S\ DZ\ Regular\ for\ Powerline:h14
  "set guifont=Droid\ Sans\ Mono\ for\ Powerline\ Plus\ Nerd\ File\ Types:h14
  set guifont=MesloLGSDZNerdFontComplete-Regular:h16
  set guioptions-=m  "remove menu bar
  set guioptions-=T  "remove toolbar
  set guioptions-=r  "remove right-hand scroll bar
  set guioptions-=L  "remove left-hand scroll bar
endif

" CUSTOM KEY BINDINGS
let mapleader="," " mapping leader
"Map <C-L> (redraw screen) to also turn off search highlighting until the next search
nnoremap <leader>L :nohl<cr>
" custom command to show unprintable characters
nnoremap <leader>l :set list!<cr>
" toggle cursor line
nnoremap <leader>i :set cursorline!<cr>
" to write as root
noremap <leader>W :w !sudo tee % > /dev/null
" <Leader>q: Quit all, very useful in vimdiff
nnoremap <Leader>q :qa<cr>
" _ : Quick horizontal splits
nnoremap _ :new<cr>
" | : Quick vertical splits
nnoremap <bar> :vnew<cr>
" quickly edit new file
nnoremap <leader>e : enew<cr>
" buffer delete
nnoremap <leader>d :bd!<cr>
nnoremap <leader>D :%bd!<cr>
" compare split windows
nnoremap <leader>c :windo diffthis<cr>
nnoremap <leader>C :windo diffoff<cr>
" move to current directory
nnoremap sc :lcd %:p:h<cr>
" remove lines
nnoremap <leader>G :g//d<cr>
nnoremap <leader>V :v//d<cr>
nnoremap <leader>S :%s///g<cr>
" copy current relative file path
nnoremap cr :let @*=expand
" lgrep
nnoremap <Leader>r :silent lgrep<Space>
nnoremap <Leader>R :silent lgrep <C-r><C-w><cr>
" to resize windows
nmap <leader>vs :vertical resize +10<cr>
nmap <leader>hs :resize +10<cr>
" switch between current and last buffer
nmap <space>. <c-^>
" quickly open quick fix
nmap <space>q : copen<cr>
nmap <space>Q : cclose<cr>
" when in visual mode, search for selected text
vnoremap // y/<C-R>"<cr>
" remove all trailing spaces
nnoremap <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><cr>

" emacs bindings
" alt - j
inoremap ∆ <down>
" alt - k
inoremap ˚ <up>
" alt - f
inoremap ƒ <c-right>
" alt - b
inoremap ∫ <c-left>
" alt - d
inoremap ∂ <esc>dwi


" Terminal
" vim-powered terminal in split window
map <Leader>z :bel term ++close<cr>
tmap <Leader>z <c-w>:vert term ++close<cr>

nnoremap <Leader>cl :set conceallevel=0<cr>

" custom command to indent json
com! FormatJSON %!python -m json.tool
com! IndentJSON %!jq -r .
com! ShowSpecial set list

" C-x C-k to auto complete dictionary words
set dictionary+=/usr/share/dict/words

" java decompiler
augr class
  au!
  au bufreadpost,filereadpost *.class %!jad -noctor -lnc -ff -i -p %
  au bufreadpost,filereadpost *.class set readonly
  au bufreadpost,filereadpost *.class set ft=java
  au bufreadpost,filereadpost *.class normal gg=G
  au bufreadpost,filereadpost *.class set nomodified
augr END



" PLUGIN SPECIFIC
" theme
colorscheme onedark " select color scheme
" toggle background
function! BgToggleSol()
  if &background == "light"
    execute ":set background=dark"
  else
    execute ":set background=light"
  endif
endfunction
nnoremap <F2> :call BgToggleSol()<cr>
" air-line settings
let g:airline_theme='wombat'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:table_mode_corner_corner="+"
let g:table_mode_header_fillchar="="
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif


" FZF settings
" search for a word
nnoremap <space>a :Ag<cr>
nnoremap <space>A :Ag <C-r><C-w><cr>
" find lines in file
nnoremap <space>l :BLines<cr>
nnoremap <space>L :Lines <C-r><C-w><cr>
" Find tags
nnoremap <space>t :BTags<cr>
nnoremap <space>T :Tags <C-r><C-w><cr>
" Find files
nnoremap <space>f :FZF<cr>
nnoremap <C-p> :<C-u>FZF<cr>
nnoremap <space>F :FZF <C-r><C-w><cr>
" History
nnoremap <space>r :History<cr>
" get command history
nnoremap <space>d :History:<cr>
" show current buffer commits
nnoremap <space>c :BCommits<cr>
" Show git status
nnoremap <space>s :GFiles?<cr>
" get all key mappings
nnoremap <space>m :Maps<cr>
" get all buffers
nnoremap <space>b :Buffers<cr>
" get Windows
nnoremap <space>w :Windows<cr>
" use ripgrep
if executable('rg')
  let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
  command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
endif
nnoremap <silent> <space>e :call Fzf_dev()<cr>
" Files + devicons
function! Fzf_dev()
  let l:fzf_files_options = '--preview "bat --theme="OneHalfDark" --style=numbers,changes --color always {2..-1} | head -'.&lines.'"'

  function! s:files()
    let l:files = split(system($FZF_DEFAULT_COMMAND), '\n')
    return s:prepend_icon(l:files)
  endfunction

  function! s:prepend_icon(candidates)
    let l:result = []
    for l:candidate in a:candidates
      let l:filename = fnamemodify(l:candidate, ':p:t')
      let l:icon = WebDevIconsGetFileTypeSymbol(l:filename, isdirectory(l:filename))
      call add(l:result, printf('%s %s', l:icon, l:candidate))
    endfor

    return l:result
  endfunction

  function! s:edit_file(item)
    let l:pos = stridx(a:item, ' ')
    let l:file_path = a:item[pos+1:-1]
    execute 'silent e' l:file_path
  endfunction

  call fzf#run({
        \ 'source': <sid>files(),
        \ 'sink':   function('s:edit_file'),
        \ 'options': '-m ' . l:fzf_files_options,
        \ 'down':    '50%' })
endfunction

" insert mode fzf
inoremap <expr> <c-x><c-k> fzf#vim#complete('cat /usr/share/dict/words')
" Global line completion (not just open buffers. ripgrep required.)
inoremap <expr> <c-x><c-l> fzf#vim#complete(fzf#wrap({
  \ 'prefix': '^.*$',
  \ 'source': 'rg -n ^ --color always',
  \ 'options': '--ansi --delimiter : --nth 3..',
  \ 'reducer': { lines -> join(split(lines[0], ':\zs')[2:], '') }}))
" Path completion with custom source command
inoremap <expr> <c-x><c-f> fzf#vim#complete#path('rg --files')

" grep
let g:grepper       = {}
let g:grepper.tools = ['rg', 'ag', 'grep', 'git']
set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
set grepformat=$f:$l:%c:%m
" Search for the current word
nnoremap <Leader>* :Grepper -cword -noprompt<cr>
nnoremap <space>g : Grepper <cr>
nnoremap <space>G :Grepper -tool rg -buffers<cr>
" Search for the current selection
nmap gs <plug>(GrepperOperator)
xmap gs <plug>(GrepperOperator)
cabbrev grep GrepperGrep
function! SetupCommandAlias(input, output)
  exec 'cabbrev <expr> '.a:input
        \ .' ((getcmdtype() is# ":" && getcmdline() is# "'.a:input.'")'
        \ .'? ("'.a:output.'") : ("'.a:input.'"))'
endfunction
call SetupCommandAlias("grep", "GrepperGrep")


"NERTtree mappings
" Toggle NERDTree
nmap <silent> <leader>t :NERDTreeToggle<cr>
" expand to the path of the file in the current buffer
nmap <silent> <leader>T :NERDTreeFind<cr>
let NERDTreeShowHidden=1
let NERDTreeDirArrowExpandable = '▷'
let NERDTreeDirArrowCollapsible = '▼'
let NERDTreeShowExecutableFlag = 0


"futitive git
let g:fugitive_github_domains      = ['https://gecgithub01.walmart.com']
let g:github_enterprise_urls       = ['https://gecgithub01.walmart.com']
nnoremap <leader>gl :Git log -10 -- %<cr>
nnoremap <leader>gs :Git<cr>
nnoremap <leader>gb :Git blame<cr>
nnoremap <leader>gB :GV<cr>
nnoremap <leader>gd :Gvdiffsplit<cr>
"Ggrep custom command
command -nargs=+ Ggr execute 'silent Ggrep!' <q-args> | cw | redraw!


" UltiSnips Trigger configuration.
let g:ycm_key_list_select_completion=['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion=['<C-p>', '<Up>']

let g:UltiSnipsExpandTrigger="<Tab>"
let g:UltiSnipsJumpForwardTrigger="<Tab>"
let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
"
"If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetDirectories = ['~/.vim/UltiSnips', 'UltiSnips']


" session management
let g:session_autosave='yes'
let g:session_autoload='yes'
let g:session_default_to_last='1'
let g:session_autosave_to = 'default'

" vim-rsi
" disable meta keys for RSI
let g:rsi_no_meta = 1

"Souround settings
" ,# Surround a word with #{ruby interpolation}
map ,# ysiw#
vmap ,# c#{<C-R>"}<ESC>

" ," Surround a word with "quotes"
map ," ysiw"
vmap ," c"<C-R>""<ESC>

" ,' Surround a word with 'single quotes'
map ,' ysiw'
vmap ,' c'<C-R>"'<ESC>

" ,) or ,( Surround a word with (parens)
" The difference is in whether a space is put in
map ,( ysiw(
map ,) ysiw)
vmap ,( c( <C-R>" )<ESC>
vmap ,) c(<C-R>")<ESC>

" ,[ Surround a word with [brackets]
map ,] ysiw]
map ,[ ysiw[
vmap ,[ c[ <C-R>" ]<ESC>
vmap ,] c[<C-R>"]<ESC>

" ,{ Surround a word with {braces}
map ,} ysiw}
map ,{ ysiw{
vmap ,} c{ <C-R>" }<ESC>
vmap ,{ c{<C-R>"}<ESC>

map ,` ysiw`
vmap ,` c`<C-R>"`<ESC>

" React syntax
let g:jsx_ext_required = 0 " Allow JSX in normal JS files
let g:syntastic_javascript_checkers = ['eslint']

"gpg
" Armor files
let g:GPGPreferArmor=1
" Set the default option
let g:GPGDefaultRecipients=["rajshekar.ch@gmail.com"]
"augroup GPG
"    autocmd!
"    autocmd FileType gpg setlocal updatetime=12000
"    autocmd CursorHold *.\(gpg\|asc\|pgp\) quit
"augroup END

" tern
"enable keyboard shortcuts
let g:tern_map_keys=1
"show argument hints
let g:tern_show_argument_hints='on_hold'

"Latex
autocmd BufWritePost *.tex call Tex_RunLaTeX()
nmap <leader>m :up<cr>:call Tex_ViewLaTeX()<cr>

" Sneak
let g:sneak#label = 1

" Which key
nnoremap <silent> <leader> :WhichKey ','<cr>
nnoremap <silent> <space> :WhichKey '<space>'<cr>
nnoremap ] :WhichKey ']'<cr>
nnoremap [ :WhichKey '['<cr>

" Vimux
"" Prompt for a command to run
map <leader>vp :VimuxPromptCommand<cr>
" Run last command executed by VimuxRunCommand
map <leader>vl :VimuxRunLastCommand<cr>

" css colors
let g:cssColorVimDoNotMessMyUpdatetime = 1
