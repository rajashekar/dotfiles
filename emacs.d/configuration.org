#+TITLE: Emacs Configuration

* Essential settings.
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message "") ;; disable messaging on scratch pad
(setq visible-bell nil) ;; get rid of bells
(setq ring-bell-function 'ignore) ;; get rid of bells
(global-hl-line-mode 1) ;; to show cursor
(global-linum-mode t) ;; to show line numbers
(column-number-mode t) ;; show column number
(set-default 'truncate-lines t) ;; no wrap
(show-paren-mode 1) ;; show matching parenthesis 
(fset 'yes-or-no-p 'y-or-n-p) ;; short version of yes or no
(global-auto-revert-mode t) ;; Automatically refresh buffer 
(global-font-lock-mode t) ;; Turn on syntax highlighting whenever possible.
(setq vc-follow-symlinks t) ;; When opening a file, always follow symlinks.
(transient-mark-mode t) ;; Turn on transient-mark-mode.
(setq confirm-kill-emacs 'y-or-n-p) ;; confirm Emacs close

;; If some text is selected, and you type some text, delete the
;; selected text and start inserting your typed text.
(delete-selection-mode t)

;;Allow 20MB of memory (instead of 0.76MB) before calling
;;garbage collection. This means GC runs less often, which speeds
;;up some operations.
(setq gc-cons-threshold 20000000)

;;(menu-bar-mode -1) ;; disable menu for GUI
;; (tool-bar-mode -1) ;; disable tool bar
(if window-system (tool-bar-mode 0)) ;; turn off toolbar

;; disable splash screen
(setq inhibit-splash-screen t
      inhibit-startup-message t
      inhibit-startup-echo-area-message t)

;; disable scroll bar
(when (boundp 'scroll-bar-mode)
  (scroll-bar-mode -1))

(setq visual-line-fringe-indicators '(left-curly-arrow right-curly-arrow))
(setq-default left-fringe-width nil)
(setq-default indicate-empty-lines t)
(setq-default indent-tabs-mode nil)
(eval-after-load "vc" '(setq vc-handled-backends nil))
(setq vc-follow-symlinks t)
(setq large-file-warning-threshold nil)
(setq split-width-threshold nil)
(setq custom-safe-themes t)
(setq tab-width 4)
#+END_SRC
* Package Management 
#+BEGIN_SRC emacs-lisp
(require 'cask "/usr/local/share/emacs/site-lisp/cask/cask.el")
(cask-initialize)
(require 'pallet)
#+END_SRC
* Theme Management
#+BEGIN_SRC emacs-lisp
;; added by emacs - START
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil : background "#3F3F3F" :foreground "#DCDCCC" : inverse-video nil :box nil :strike-through nil : overline nil :underline nil :slant normal : weight normal :height 140 :width normal : foundry "nil" :family "Meslo LG S DZ for Powerline")))))
;; added by emacs - END

;; Theme
(load-theme 'material t)
;;(load-theme 'zenburn t)
;;(load-theme 'wombat t)

;; airline themes
(require 'airline-themes)
;;(load-theme 'airline-light)
(load-theme 'airline-wombat)
(setq powerline-utf-8-separator-left        #xe0b0
      powerline-utf-8-separator-right       #xe0b2
      airline-utf-glyph-separator-left      #xe0b0
      airline-utf-glyph-separator-right     #xe0b2
      airline-utf-glyph-subseparator-left   #xe0b1
      airline-utf-glyph-subseparator-right  #xe0b3
      airline-utf-glyph-branch              #xe0a0
      airline-utf-glyph-readonly            #xe0a2
      airline-utf-glyph-linenumber          #xe0a1)
#+END_SRC
* Evil Mode
#+BEGIN_SRC emacs-lisp
(require 'evil)
(evil-mode 1)

;; disable evil on git time machine
(eval-after-load 'git-timemachine
  '(progn
     (evil-make-overriding-map git-timemachine-mode-map 'normal)
     ;; force update evil keymaps after git-timemachine-mode loaded
     (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps)))

(global-evil-surround-mode 1)
#+END_SRC
* Helm Mode 
#+BEGIN_SRC emacs-lisp
(require 'helm-fuzzy-find)
(require 'helm-config)
(require 'helm-ls-git)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x r b") 'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-x C-d") 'helm-browse-project)
(global-set-key (kbd "C-x f") 'helm-multi-files)
(global-set-key (kbd "C-x C-r") 'helm-recentf)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-set-key (kbd "C-c h o") 'helm-occur)
(global-set-key (kbd "C-c h g") 'helm-google-suggest)
(helm-mode 1)
#+END_SRC
* Dired Mode
#+BEGIN_SRC emacs-lisp
  (require 'dired-x)
  (setq diredp-hide-details-initially-flag nil)
  (require 'dired+)
  (require 'dired-open)

  (setq dired-omit-files "^\\.?#\\|^\\.[^.].*")
  (add-hook 'dired-mode-hook (lambda () (dired-omit-mode t)))

  (setq dired-open-extensions
        '(("pdf" . "evince")
          ("mkv" . "vlc")
          ("mp4" . "vlc")
          ("avi" . "vlc")))

  ;; Use “j” and “k” to move around in dired.
  (evil-define-key 'normal dired-mode-map (kbd "j") 'dired-next-line)
  (evil-define-key 'normal dired-mode-map (kbd "k") 'dired-previous-line)

  ;; Kill buffers of files/directories that are deleted in dired.
  (setq dired-clean-up-buffers-too t)

  ;;Always copy directories recursively instead of asking every time.
  (setq dired-recursive-copies 'always)

  ;;Ask before recursively deleting a directory, though.
  (setq dired-recursive-deletes 'top)
#+END_SRC
* Neo Tree
#+BEGIN_SRC emacs-lisp
(require 'neotree)
(global-set-key "\C-xt" 'neotree-toggle)
(global-set-key "\C-xT" 'neotree-find)
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
(setq neo-smart-open t)
(put 'dired-find-alternate-file 'disabled nil)
#+END_SRC
* Recentf
#+BEGIN_SRC emacs-lisp
(require 'recentf)
(recentf-mode 1)
(setq recentf-auto-cleanup 'never)
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
(require 'helm-projectile)
(projectile-global-mode)
(setq projectile-completion-system 'helm)
(helm-projectile-on)
;; start projectile from in any directory
;; (setq projectile-require-project-root nil)
#+END_SRC
* Autocomplete
#+BEGIN_SRC emacs-lisp
;;autocomplete settings
(require 'auto-complete)
(require 'auto-complete-config)
(ac-config-default)
#+END_SRC
* SHELL
#+BEGIN_SRC emacs-lisp
;; shell settings
(require 'multi-term)
(setq multi-term-program "/bin/zsh")

;; to have PATH varaibles in UI
(exec-path-from-shell-initialize)

;; eshell settings
(eshell-git-prompt-use-theme 'powerline)

;; multi term
(global-set-key (kbd "C-c s") 'multi-term)
(setq multi-term-program-switches "--login")
#+END_SRC
* Org Mode
** org mode settings
   #+BEGIN_SRC emacs-lisp
    (global-set-key "\C-cl" 'org-store-link)
    (global-set-key "\C-ca" 'org-agenda)
    (global-set-key "\C-cc" 'org-capture)
    (global-set-key "\C-cb" 'org-iswitchb)
    (add-hook 'org-mode-hook (lambda () (linum-mode 0)))

    ;; instead of ellipses
    (setq org-ellipsis "⤵")

    ;;Use syntax highlighting in source blocks while editing.
    (setq org-src-fontify-natively t)

    ;; Make TAB act as if it were issued in a buffer of the language’s major mode.
    (setq org-src-tab-acts-natively t)

    (setq org-src-window-setup 'current-window)

    (add-hook 'org-capture-mode-hook 'evil-insert-state)
    
    ;; Don’t ask before evaluating code blocks.
    (setq org-confirm-babel-evaluate nil)

    ;;Translate regular ol’ straight quotes to typographically-correct curly quotes when exporting.
    (setq org-export-with-smart-quotes t)

    ;; Don’t include a footer with my contact and publishing information at the bottom of every exported HTML document.
    (setq org-html-postamble nil)

    ;; Exporting to PDF 
    (setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
    
    ;; Include the minted package in all of my LaTeX exports.
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    (setq org-latex-listings 'minted)   

    ;; log time when task is done
    (setq org-log-done 'time)

    (setq org-directory "~/org")

    (defun org-file-path (filename)
    "Return the absolute address of an org file, given its relative name."
    (concat (file-name-as-directory org-directory) filename))

    (setq org-index-file (org-file-path "index.org"))
    (setq org-archive-location
    (concat (org-file-path "archive.org") "::* From %s"))
    (setq org-agenda-files (list org-index-file))

    (defun raj/mark-done-and-archive ()
    "Mark the state of an org-mode item as DONE and archive it."
    (interactive)
    (org-todo 'done)
    (org-archive-subtree))

    (define-key org-mode-map (kbd "C-c t") 'raj/mark-done-and-archive)

    (setq org-capture-templates
    '(("b" "Blog idea"
        entry
        (file (org-file-path "blog-ideas.org"))
        "* TODO %?\n")

    ("g" "Groceries"
        checkitem
        (file (org-file-path "groceries.org")))

    ("l" "Today I Learned..."
        entry
        (file+datetree (org-file-path "til.org"))
        "* %?\n")

    ("w" "Work log..."
        entry
        (file+datetree (org-file-path "work.org"))
        "* %?\n")

    ("r" "Reading"
        checkitem
        (file+headline (org-file-path "to-read.org") "List [/]"))

    ("t" "Todo"
        entry
        (file+headline org-index-file "Tasks")
        "* TODO %?\n")))

    ;; Hit M-n to quickly open up a capture template for a new todo.
    (defun org-capture-todo ()
    (interactive)
    (org-capture :keys "t"))

    (global-set-key (kbd "M-n") 'org-capture-todo)
    (add-hook 'gfm-mode-hook
            (lambda () (local-set-key (kbd "M-n") 'org-capture-todo)))
    (add-hook 'haskell-mode-hook
            (lambda () (local-set-key (kbd "M-n") 'org-capture-todo)))
   #+END_SRC
** org bullets
   #+BEGIN_SRC emacs-lisp
    (require 'org-bullets)
    (setq org-bullets-face-name (quote org-bullet-face))
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
   #+END_SRC
** org mode presentations
   #+BEGIN_SRC emacs-lisp
    (require 'ox-reveal)
    ;;(setq org-reveal-root "file:///~/Documents/reveal.js")
    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    ;; Allow export to markdown and beamer (for presentations).
    (require 'ox-md)
    (require 'ox-beamer)
   #+END_SRC
* UTF-8
#+BEGIN_SRC emacs-lisp
;; utf-8 settings
;; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
(setq utf-translate-cjk-mode nil)

(set-language-environment 'utf-8)
(setq locale-coding-system 'utf-8)

;; set the default encoding system
(prefer-coding-system 'utf-8)
(setq default-file-name-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
;; backwards compatibility as default-buffer-file-coding-system
;; is deprecated in 23.2.
(if (boundp buffer-file-coding-system)
    (setq buffer-file-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8))

;; Treat clipboard input as UTF-8 string first; compound text next, etc.
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+END_SRC
* GTAGS
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                (ggtags-mode 1)
                (define-key ggtags-mode-map (kbd "C-c g d") 'ggtags-find-definition)
                (define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
                (define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
                (define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
                (define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
                (define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
                (define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags))))

(with-eval-after-load 'ggtags
    (evil-make-overriding-map ggtags-mode-map)
    ;; force update evil keymaps after ggtags-mode loaded
    (add-hook 'ggtags-mode-hook #'evil-normalize-keymaps))
#+END_SRC
* GIT
** Magit settings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
** Git gutter
#+BEGIN_SRC emacs-lisp
(global-git-gutter-mode +1)
(global-set-key (kbd "C-x C-g") 'git-gutter)
(global-set-key (kbd "C-x v =") 'git-gutter:popup-hunk)
;; Jump to next/previous hunk
(global-set-key (kbd "C-x p") 'git-gutter:previous-hunk)
(global-set-key (kbd "C-x n") 'git-gutter:next-hunk)
;; Stage current hunk
(global-set-key (kbd "C-x v s") 'git-gutter:stage-hunk)
;; Revert current hunk
(global-set-key (kbd "C-x v r") 'git-gutter:revert-hunk)
;; Mark current hunk
(global-set-key (kbd "C-x v SPC") #'git-gutter:mark-hunk)
#+END_SRC
** smerge mode
#+BEGIN_SRC emacs-lisp
(setq smerge-command-prefix "\C-cv")
(defun my-enable-smerge-maybe ()
  (when (and buffer-file-name (vc-backend buffer-file-name))
    (save-excursion
      (goto-char (point-min))
      (when (re-search-forward "^<<<<<<< " nil t)
        (smerge-mode +1)))))
(add-hook 'buffer-list-update-hook #'my-enable-smerge-maybe)
#+END_SRC
* Ivy, Counsel, Swiper  
#+BEGIN_SRC emacs-lisp
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-load-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c C-g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
#+END_SRC
* Engine Mode
#+BEGIN_SRC emacs-lisp
(require 'engine-mode)

(defengine duckduckgo
  "https://duckduckgo.com/?q=%s"
  :keybinding "d")

(defengine github
  "https://github.com/search?ref=simplesearch&q=%s"
  :keybinding "g")

(defengine google
  "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
  :keybinding "o")

(defengine rfcs
  "http://pretty-rfc.herokuapp.com/search?q=%s")

(defengine stack-overflow
  "https://stackoverflow.com/search?q=%s"
  :keybinding "s")

(defengine wikipedia
  "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
  :keybinding "w")

(defengine wiktionary
  "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")

(engine-mode t)
#+END_SRC
* Custom 
** Change windows settings
    #+BEGIN_SRC emacs-lisp
    (defun toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
         (next-win-buffer (window-buffer (next-window)))
         (this-win-edges (window-edges (selected-window)))
         (next-win-edges (window-edges (next-window)))
         (this-win-2nd (not (and (<= (car this-win-edges)
                     (car next-win-edges))
                     (<= (cadr this-win-edges)
                     (cadr next-win-edges)))))
         (splitter
          (if (= (car this-win-edges)
             (car (window-edges (next-window))))
          'split-window-horizontally
        'split-window-vertically)))
    (delete-other-windows)
    (let ((first-win (selected-window)))
      (funcall splitter)
      (if this-win-2nd (other-window 1))
      (set-window-buffer (selected-window) this-win-buffer)
      (set-window-buffer (next-window) next-win-buffer)
      (select-window first-win)
      (if this-win-2nd (other-window 1))))))
      (global-set-key (kbd "C-x |") 'toggle-window-split)
    #+END_SRC
** Copy file path to clipboard
   #+BEGIN_SRC emacs-lisp
    (defun my-put-file-name-on-clipboard ()
    "Put the current file name on the clipboard"
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                        (buffer-file-name))))
        (when filename
        (with-temp-buffer
            (insert filename)
            (clipboard-kill-region (point-min) (point-max)))
        (message filename))))
   #+END_SRC
** Utility functions
   #+BEGIN_SRC emacs-lisp
    ;; create empty buffer
    (defun raj/generate-scratch-buffer ()
    "Create and switch to a temporary scratch buffer with a random name."
    (interactive)
    (switch-to-buffer (make-temp-name "scratch-")))
    (global-set-key (kbd "C-x e") 'raj/generate-scratch-buffer)

    ;; delete current buffer
    (defun raj/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))
    (global-set-key (kbd "C-x k") 'raj/kill-current-buffer)

    ;; increase, decrease & reset font size
    (defun sensible-defaults/reset-text-size ()
    (interactive)
    (text-scale-set 0))
    (defun sensible-defaults/bind-keys-to-change-text-size ()
    "Bind C-+ and C-- to increase and decrease text size, respectively."
    (define-key global-map (kbd "C-)") 'sensible-defaults/reset-text-size)
    (define-key global-map (kbd "C-+") 'text-scale-increase)
    (define-key global-map (kbd "C-=") 'text-scale-increase)
    (define-key global-map (kbd "C-_") 'text-scale-decrease)
    (define-key global-map (kbd "C--") 'text-scale-decrease))
    (sensible-defaults/bind-keys-to-change-text-size)
    
    ;; back up to temp directory
    (defun sensible-defaults/backup-to-temp-directory ()
    "Store backups and auto-saved files in
    TEMPORARY-FILE-DIRECTORY (which defaults to /tmp on Unix),
    instead of in the same directory as the file. This means we're
    still making backups, but not where they'll get in the way.
    WARNING: on most Unix-like systems /tmp is volatile, in-memory
    storage, so your backups won't survive if your computer crashes!
    If you're not willing to take this risk, you shouldn't enable
    this setting."
    (setq backup-directory-alist
            `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
            `((".*" ,temporary-file-directory t))))
    (sensible-defaults/backup-to-temp-directory)
   #+END_SRC
* Other modes
** Winner
   #+BEGIN_SRC emacs-lisp
     (winner-mode t) ;; quickly move between buffers
   #+END_SRC
** JAVA
   #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-h j") 'javadoc-lookup)
   #+END_SRC
** Ditta
   #+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
    'org-babel-load-languages '(
            (python . t)
            (ditaa . t))
    )
    (eval-after-load "artist"
    '(define-key artist-mode-map [(down-mouse-3)] 'artist-mouse-choose-operation)
    )
    (setq org-ditaa-jar-path "/Users/rchint1/Documents/ditaa/ditaa0_9.jar")
   #+END_SRC
** Multiple cursors
   #+BEGIN_SRC emacs-lisp
    (require 'multiple-cursors)
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
   #+END_SRC
** Jump Mode
   #+BEGIN_SRC emacs-lisp
    (autoload
    'ace-jump-mode
    "ace-jump-mode"
    "Emacs quick move minor mode"
    t)
    ;; you can select the key you prefer to
    ;;If you use evil
    (define-key evil-normal-state-map (kbd "SPC") 'ace-jump-mode)
   #+END_SRC
** Which key
   #+BEGIN_SRC emacs-lisp
    (require 'which-key)
    (which-key-mode)
   #+END_SRC
** Undo Tree
   #+BEGIN_SRC emacs-lisp
    (global-undo-tree-mode) 
    (global-set-key (kbd "M-/") 'undo-tree-visualize)
   #+END_SRC
** Switch Window
   #+BEGIN_SRC emacs-lisp
    (require 'switch-window)
    (global-set-key (kbd "C-M-z") 'switch-window)
   #+END_SRC
** Web Mode
   #+BEGIN_SRC emacs-lisp
    (add-hook 'web-mode-hook
          (lambda ()
            (rainbow-mode)
            (rspec-mode)
            (setq web-mode-markup-indent-offset 2)))
    (add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
   #+END_SRC
** Wgrep
   #+BEGIN_SRC emacs-lisp
    (eval-after-load 'grep
    '(define-key grep-mode-map
        (kbd "C-x C-q") 'wgrep-change-to-wgrep-mode))

    (eval-after-load 'wgrep
    '(define-key grep-mode-map
        (kbd "C-c C-c") 'wgrep-finish-edit))

    (setq wgrep-auto-save-buffer t)
   #+END_SRC

** Company
   #+BEGIN_SRC emacs-lisp
    (add-hook 'after-init-hook 'global-company-mode)
   #+END_SRC

